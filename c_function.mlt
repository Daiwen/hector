(* **
 * Copyright 2013-2016, Inria
 * Suman Saha, Julia Lawall, Gilles Muller, Quentin Lambert
 * This file is part of Hector.

 * Hector is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, according to version 2 of the License.

 * Hector is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with Hector.  If not, see <http://www.gnu.org/licenses/>.

 * The authors reserve the right to distribute this or future versions of
 * Hector under other licenses.
 * *)

open Kaputt
module ACFGO = Acfg_operations

let configs = Configs.get ((Sys.getenv "PWD") ^ "/configs")

let _ =
  Asto.set_error_constants   configs.Configs.error_constants;
  Asto.set_testing_functions configs.Configs.testing_functions

let get_cfgs filename =
  let (program, _) = Parse_c.parse_c_and_cpp false false filename in
  let (functions', _) = Common.unzip program in
  let functions'' = List.tl (List.rev functions') in
  Flag_parsing_c.verbose_type := false;
  let functions =
    List.map fst
      (Type_annoter_c.annotate_program !Type_annoter_c.initial_env functions'')
  in
  let aux acc toplevel =
    try (ACFGO.of_ast_c toplevel)::acc with
      Control_flow_c_build.Error _
    | ACFG.NoCFG -> acc
  in
  let cfgs = List.fold_left aux [] functions in
  List.iter HC.annotate_error_handling cfgs;
  List.iter HC.annotate_resource_handling cfgs;
  cfgs



let mk_cfg_test title filename msg test res compare =
  let cfgs = get_cfgs filename in
  let r = test cfgs in
  let f () = Assertion.is_true
      ~msg: (title ^ msg ^ filename ^ "\n")
      (compare r res) in
  Kaputt.Test.make_simple_test
    ~title: (title ^ ": " ^ filename)
    f

let concat_find_errorhandling cfgs =
  List.concat (List.map find_errorhandling cfgs)

let remove_doubles acc c =
  if List.exists
      (fun f ->
         ACFG.resource_equal f.exemplar.res c.exemplar.res &&
         f.block_head.GO.index = c.block_head.GO.index)
      acc
  then
    acc
  else
    c::acc

let concat_get_faults cfgs =
  let error_blocks = List.map find_errorhandling cfgs in
  let exemplars =
    List.map2 (fun cfg error_blocks -> get_exemplars cfg error_blocks)
      cfgs error_blocks
  in
  let temp = List.combine error_blocks exemplars in
  let faults =
    List.map2
      (fun cfg (error_blocks, exemplars) ->
         let candidates =
           List.fold_left
             (fun acc e ->
                acc @
                get_faults cfg error_blocks e)
             []
             exemplars
         in
         List.fold_left remove_doubles [] candidates)
      cfgs temp
  in
  List.concat faults

let is_length xs l =
  (List.length xs) = l

let () =
  Test.run_tests ~output: (Test.Text_output stderr)
    [
      mk_cfg_test
        "find_errorhandling" "./tests/complex.c"
        " should return a list of length 3 for " concat_find_errorhandling 3
        is_length;
      mk_cfg_test
        "find_errorhandling" "./tests/more_complex.c"
        " should return a list of length 4 for " concat_find_errorhandling 4
        is_length;
      mk_cfg_test
        "get_faults" "./tests/no_resources.c"
        " should return the empty list for " concat_get_faults 0
        is_length;
      mk_cfg_test
        "get_faults" "./tests/complex_no_resources.c"
        " should return the empty list for " concat_get_faults 0
        is_length;
      mk_cfg_test
        "get_faults" "./tests/complex_resources.c"
        " should return a list of length 1 " concat_get_faults 1
        is_length;
      mk_cfg_test
        "get_faults" "./tests/temp_in_loop.c"
        " should return the empty list for " concat_get_faults 0
        is_length;
      mk_cfg_test
        "get_faults" "./tests/interproc.c"
        " should return the empty list for " concat_get_faults 1
        is_length;
      mk_cfg_test
        "get_faults" "./tests/array_aliases.c"
        " should return the empty list for " concat_get_faults 2
        is_length;
      mk_cfg_test
        "get_faults" "./tests/ignored_if_condition.c"
        " should return the empty list for " concat_get_faults 0
        is_length;
    ]
